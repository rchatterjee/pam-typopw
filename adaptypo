#!/usr/bin/python

import os, sys
import pwd
import argparse
from adaptive_typo.typo_db_access import UserTypoDB, VERSION
import subprocess
import getpass


USER = ""
ALLOW_TYPO_LOGIN = True

class AbortSettings(RuntimeError):
    pass

def _get_login_user():
    # gets the username of the logging user
    pp = subprocess.Popen('who', stdout=subprocess.PIPE)
    output = pp.stdout.read()
    first_line = output.splitlines()[0]
    user = first_line.split()[0]
    return user

def _get_username():
    # trying to go over the problem of 
    if USER:
        print "Designated user: {}".format(USER)
        return USER
    uid = os.getuid()
    is_root = uid == 0
    user = _get_login_user()
    if is_root:
        r = raw_input("Setting will be done for login user: {}.\n"
              "Please confirm. (Yn) ".format(user))
        abort = r and r.lower() == 'n'
        if abort:
            raise AbortSettings()
    else:
        print "Designated user: {}".format(user)
    return user

def _get_typoDB():
    user = _get_username()
    typoDB = UserTypoDB(user)
    if not typoDB.is_typotoler_init():
        raise Exception("{}:{} not initiated".format(
            str(typoDB),
            typoDB.get_db_path())
        )
    return typoDB

def root_only_operation():
    if os.getuid() != 0:
        print("ERROR!! You need root priviledge to run this operation")
        raise AbortSettings

def initiate_typodb(RE_INIT = False):
    root_only_operation()
    if not USER:
        user = raw_input("Please enter your username: ")
    else:
        print "Operation will be done for user: {}".format(USER)
        user = USER
    try:
        # checks that such a user exists:
        homedir = pwd.getpwnam(user).pw_dir
    except KeyError as e:
        print "Error: {}".format(e.message)
    else:
        from pam_typotolerant import check_pw
        right_pw = False
        for tries in range(3):
            pw = getpass.getpass()
            right_pw = (check_pw(user, pw) == 0)
            if right_pw:
                stub = "RE-" if RE_INIT else ""
                print("{}Initiating the database...".format(stub),)
                from adaptive_typo.typo_db_access import UserTypoDB
                tb = UserTypoDB(user)
                if RE_INIT:
                    tb.update_after_pw_change(pw)
                else: # Normal Init
                    tb.init_typotoler(pw, typoTolerOn=ALLOW_TYPO_LOGIN)
                print("Done!")
                return 0
            else:
                print("Doesn't look like a correct password. Please try again.")

        print "Failed to enter a correct password 3 times."
        # to stop the installation process
        raise ValueError("incorrect pw given 3 times")


def uninstall_adaptive_typo():
    root_only_operation()
    cmd = '''
#!/bin/bash
set -e
set -u

# Last try to send logs
nohup python -u /usr/local/bin/send_typo_log.py >/dev/null 2>&1 &
user=$(who am i| awk '{print $1}')
homedir=$(echo ~$user)

# remove dawg
common_auth_file=/etc/pam.d/common-auth
if [ -e ${common_auth_file}.orig ]; then
    mv ${common_auth_file}.orig ${common_auth_file}
fi
bindir=/usr/local/bin/
rm -rf ${bindir}/pam_typotolerant.py $bindir/chkpw $bindir/send_typo_log.py
rm -rf ${bindir}/adaptypo
rm -rf /etc/adaptive_typo/ $homedir/.typoToler*
rm -rf /etc/pam.d/typo_auth
pip -q uninstall --yes adaptive-typo
if [ -e ffile.txt ]; then
    cat ffile.txt | xargs rm -i
    rm -rf ffile.txt
fi

apt-get -y remove libpam-python libdawgdic-dev
    '''
    os.system(cmd)


parser = argparse.ArgumentParser("adaptypo ")

parser.add_argument(
    "--user",
    help="To set the username. Otherwise login user will be the target"
)
parser.add_argument(
    "--init", action="store_true",
    help="To initialize the DB. You have to run this once you install adaptive_typo"
)

parser.add_argument(
    "--allowtypo", type=str.lower, choices=['yes','no'],
    help='Allow login with typos of the password'
)

parser.add_argument(
    "--allowupload", type=str.lower, choices=['yes', 'no'],
    help="Allow uploading the non-sensive annonymous data into the server for research purposes."
)

parser.add_argument(
    "--installid", action="store_true",
    help="Prints the installation id, which you have to submit while filling up the google form"
)

parser.add_argument(
    "--status", action="store_true",
    help='Prints current states of the typotolerance.'
)

parser.add_argument(
    "--uninstall", action="store_true",
    help="To initialize the DB. You have to run this once you install adaptive_typo"
)

parser.add_argument(
    "--reinit", action="store_true",
    help="To re-initiate the DB, especially after the user's pw has changed"
)

#parser.add_argument( # TODO: We can defer it for next release
#    "--disable", type=str.lower, 
#    help="Disables typo tolerance for a user"
#)


args = parser.parse_args()
if len(sys.argv) <=1:
    print(parser.print_help())
    exit(0)

# ITS IMPORTENT THIS ONE WILL BE FIRST
if args.user:
    USER = args.user
    # print "User settings have been set to {}".format(USER)
    
try:
    if args.allowtypo:
        root_only_operation()
        typoDB = _get_typoDB()
        if args.allowtypo == "no":
            typoDB.allow_login(False)
            print "Turning OFF login with typos. The software will still monitor\n"\
                "your typos and build cache of popular typos. You can switch on this\n"\
                "whenever you want"# :{}".format(typoDB.is_allowed_login())
        elif args.allowtypo == "yes":
            print "Turning ON login with typos...",
            typoDB.allow_login(True)

    if args.allowupload:
        root_only_operation()
        typoDB = _get_typoDB()
        if args.allowupload == "yes":
            typoDB.allow_upload(True)
            print "Uploading data is enabled. You are awesome. Thanks!!"
        elif args.allowupload == "no":
            typoDB.allow_upload(False)
            print "Uploading data is disabled.  :( :'( :-(!"
            print "Thanks for using the software anyway."

    if args.init:
        root_only_operation()
        print("Initializing the typo database..")
        initiate_typodb()

    if args.reinit:
        root_only_operation()
        print "RE-initiating adaptive_typo"
        initiate_typodb(RE_INIT=True)
        
            
    if args.status:
        typoDB = _get_typoDB()
        print("\nTYPO-TOLERANCE STATUS:")
        print("\tLogin with typos: {}".format(typoDB.is_allowed_login()))
        print("\tParticipate in the study: {}".format(typoDB.is_allowed_upload()))
        print("\tInstall Id: {}".format(typoDB.get_installation_id().strip()))
        print("\tSoftware Version: {}".format(VERSION))


    if args.uninstall:
        r = raw_input("Uninstalling adaptive_typo. Will delete all the "\
                      "databases.\nPlease confirm. (yN)")
        if r and r.lower() == 'y':
            uninstall_adaptive_typo()
            
except AbortSettings as abort:
    print "Settings' change had been aborted"

