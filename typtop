#!/usr/bin/python
from __future__ import print_function
import os, sys
import pwd
import argparse
from pam_typtop.typo_db_access import UserTypoDB, VERSION
import subprocess
import getpass


USER = ""
ALLOW_TYPO_LOGIN = True
GITHUB_URL = 'https://github.com/rchatterjee/pam-typopw' # URL in github repo
first_msg = """\n\n
  /  |                          /  |                        
 _$$ |_    __    __   ______   _$$ |_     ______    ______  
/ $$   |  /  |  /  | /      \ / $$   |   /      \  /      \ 
$$$$$$/   $$ |  $$ |/$$$$$$  |$$$$$$/   /$$$$$$  |/$$$$$$  |
  $$ | __ $$ |  $$ |$$ |  $$ |  $$ | __ $$ |  $$ |$$ |  $$ |
  $$ |/  |$$ \__$$ |$$ |__$$ |  $$ |/  |$$ \__$$ |$$ |__$$ |
  $$  $$/ $$    $$ |$$    $$/   $$  $$/ $$    $$/ $$    $$/ 
   $$$$/   $$$$$$$ |$$$$$$$/     $$$$/   $$$$$$/  $$$$$$$/  
          /  \__$$ |$$ |                          $$ |      
          $$    $$/ $$ |                          $$ |      
           $$$$$$/  $$/                           $$/       
Hello!

Thanks for installing Adaptive Typo Tolerance (version: {version}).
This software attaches a new Pluggable Authentication Module (PAM) to
almost all of your common authentication processes, and observes your
password typing mistakes. It learns about your frequent typing
mistakes, and enable logging in with popular slight vairations of your
actual login password that are safe to do so.

We would like to collect some anonymous non-sensitive data about your
password typing patterns for purely research purposes. The details of
what we collect, how we collect and store, and the security blueprint
of this software can be found in the GitHub page: {url}.
The participation in the study is completely voluntary, and you can
opt out at any time while still keep using the software.

You have to install this for each user who intend to use the benefit
of adaptive typo-tolerant password login.

Please run the following command in the terminal and follow the
instructions to initialize the typo database.

$ sudo typtop --init
""".format


class AbortSettings(RuntimeError):
    pass

def _get_login_user():
    # gets the username of the logging user
    pp = subprocess.Popen('who', stdout=subprocess.PIPE)
    output = pp.stdout.read()
    first_line = output.splitlines()[0]
    user = first_line.split()[0]
    return user

def _get_username():
    # trying to go over the problem of 
    if USER:
        print("Designated user: {}".format(USER))
        return USER
    uid = os.getuid()
    is_root = uid == 0
    user = _get_login_user()
    if is_root:
        r = raw_input("Setting will be done for login user: {}.\n"
              "Please confirm. (Yn) ".format(user))
        abort = r and r.lower() == 'n'
        if abort:
            raise AbortSettings()
    else:
        print("Designated user: {}".format(user))
    return user

def _get_typoDB():
    user = _get_username()
    try:
        typoDB = UserTypoDB(user)
    except Exception as e:
        print(
            "It seems you have not initialized the db. Try running"\
            " \"sudo {} --init\" to initialize the {}.\nThe error "\
            "I ran into is the following:\n{}"\
            .format(sys.argv[0], e)
        )
        return None
    if not typoDB.is_typotoler_init():
        raise Exception("{}:{} not initiated".format(
            str(typoDB),
            typoDB.get_db_path())
        )
    return typoDB

def root_only_operation():
    if os.getuid() != 0:
        print("ERROR!! You need root priviledge to run this operation")
        raise AbortSettings

def initiate_typodb(RE_INIT = False):
    root_only_operation()
    if not USER:
        user = raw_input("Please enter your username: ")
    else:
        print("Operation will be done for user: {}".format(USER))
        user = USER
    try:
        # checks that such a user exists:
        _ = pwd.getpwnam(user).pw_dir
    except KeyError as e:
        print("Error: {}".format(e.message))
    else:
        from pam_typotolerant import check_pw
        right_pw = False
        for _ in range(3):
            pw = getpass.getpass()
            right_pw = (check_pw(user, pw) == 0)
            if right_pw:
                stub = "RE-" if RE_INIT else ""
                print("{}Initiating the database...".format(stub),)
                tb = UserTypoDB(user)
                if RE_INIT:
                    tb.update_after_pw_change(pw)
                else: # Normal Init
                    tb.init_typotoler(pw, typoTolerOn=ALLOW_TYPO_LOGIN)
                print("Done!")
                return 0
            else:
                print("Doesn't look like a correct password. Please try again.")

        print("Failed to enter a correct password 3 times.")
        # to stop the installation process
        raise ValueError("incorrect pw given 3 times")


def uninstall_pam_typtop():
    root_only_operation()
    cmd = '''
#!/bin/bash
set -e
set -u

# Last try to send logs
nohup python -u /usr/local/bin/send_typo_log.py >/dev/null 2>&1 &
user=$(who am i| awk '{print $1}')
homedir=$(echo ~$user)

# remove dawg
common_auth_file=/etc/pam.d/common-auth
if [ -e ${common_auth_file}.orig ]; then
    mv ${common_auth_file}.orig ${common_auth_file}
fi
bindir=/usr/local/bin/
rm -rf ${bindir}/pam_typotolerant.py $bindir/chkpw $bindir/send_typo_log.py
rm -rf ${bindir}/typtop
rm -rf /etc/pam_typtop/ $homedir/.typoToler*
rm -rf /etc/pam.d/typo_auth
pip -q uninstall --yes pam_typtop
if [ -e ffile.txt ]; then
    cat ffile.txt | xargs rm -i
    rm -rf ffile.txt
fi

apt-get -y remove libpam-python libdawgdic-dev
    '''
    os.system(cmd)


parser = argparse.ArgumentParser("typtop ")

parser.add_argument(
    "--user",
    help="To set the username. Otherwise login user will be the target"
)
parser.add_argument(
    "--init", action="store_true",
    help="To initialize the DB. You have to run this once you install pam_typtop"
)

parser.add_argument(
    "--allowtypo", type=str.lower, choices=['yes','no'],
    help='Allow login with typos of the password'
)

parser.add_argument(
    "--allowupload", type=str.lower, choices=['yes', 'no'],
    help="Allow uploading the non-sensive annonymous "\
    "data into the server for research purposes."
)

parser.add_argument(
    "--installid", action="store_true",
    help="Prints the installation id, which you have to submit while filling up the google form"
)

parser.add_argument(
    "--status", action="store_true",
    help='Prints current states of the typotolerance.'
)

parser.add_argument(
    "--uninstall", action="store_true",
    help="Uninstall TypToP from your machine. Will delete all the data related to TypTop too."
)

parser.add_argument(
    "--reinit", action="store_true",
    help="To re-initiate the DB, especially after the user's pw has changed"
)

args = parser.parse_args()
if len(sys.argv) <=1:
    print(parser.print_help())
    exit(0)

# ITS IMPORTENT THIS ONE WILL BE FIRST
if args.user:
    USER = args.user
    # print("User settings have been set to {}".format(USER))
    
try:
    if args.allowtypo:
        root_only_operation()
        typoDB = _get_typoDB()
        if args.allowtypo == "no":
            typoDB.allow_login(False)
            print(
                "Turning OFF login with typos. The software will still monitor\n"\
                "your typos and build cache of popular typos. You can switch on this\n"\
                "whenever you want")# :{}".format(typoDB.is_allowed_login())
        elif args.allowtypo == "yes":
            print("Turning ON login with typos...",)
            typoDB.allow_login(True)

    if args.allowupload:
        root_only_operation()
        typoDB = _get_typoDB()
        if args.allowupload == "yes":
            typoDB.allow_upload(True)
            print("Uploading data is enabled. You are awesome. Thanks!!")
        elif args.allowupload == "no":
            typoDB.allow_upload(False)
            print("Uploading data is disabled.  :( :'( :-(!")
            print("Thanks for using the software anyway.")

    if args.init:
        root_only_operation()
        print(first_msg(url=GITHUB_URL, version=VERSION), file=sys.stderr)
        print("Initializing the typo database..")
        initiate_typodb()

    if args.reinit:
        root_only_operation()
        print("RE-initiating pam_typtop")
        initiate_typodb(RE_INIT=True)
        
            
    if args.status:
        typoDB = _get_typoDB()
        print("\nTYPO-TOLERANCE STATUS:")
        print("\tLogin with typos: {}".format(typoDB.is_allowed_login()))
        print("\tParticipate in the study: {}".format(typoDB.is_allowed_upload()))
        print("\tInstall Id: {}".format(typoDB.get_installation_id().strip()))
        print("\tSoftware Version: {}".format(VERSION))


    if args.uninstall:
        r = raw_input("Uninstalling pam_typtop. Will delete all the "\
                      "databases.\nPlease confirm. (yN)")
        if r and r.lower() == 'y':
            uninstall_pam_typtop()
            
except AbortSettings as abort:
    print("Settings' change had been aborted.")

